{"version":3,"sources":["components/NewTodo/NewTodo.js","components/Todo/Todo.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["NewTodo","state","title","id","complited","handleChange","event","target","value","setState","handleKeyPress","key","todo","uuid","completed","props","addTodo","this","className","placeholder","name","onChange","onKeyPress","React","Component","Todo","toggledCheck","deleteTask","type","onClick","htmlFor","TodoList","todos","map","index","App","prevState","filter","leftList","length","href","ReactDOM","render","document","getElementById"],"mappings":"gUAGaA,EAAb,2MACEC,MAAQ,CACNC,MAAO,GACPC,GAAI,GACJC,WAAW,GAJf,EAOEC,aAAe,SAACC,GACd,IAAMJ,EAAQI,EAAMC,OAAOC,MAE3B,EAAKC,SAAS,CACZP,WAXN,EAeEQ,eAAiB,SAACJ,GAAW,IACnBJ,EAAU,EAAKD,MAAfC,MAER,GAAkB,UAAdI,EAAMK,IAAiB,CACzB,IAAMC,EAAO,CACXT,GAAIU,MACJX,QACAY,WAAW,GAGb,EAAKC,MAAMC,QAAQJ,GAEnB,EAAKH,SAAS,CACZP,MAAO,GACPC,GAAI,GACJC,WAAW,MA9BnB,wEAmCY,IACAF,EAAUe,KAAKhB,MAAfC,MAER,OACE,2BACEgB,UAAU,WACVC,YAAY,yBACZC,KAAMlB,EACNM,MAAON,EACPmB,SAAUJ,KAAKZ,aACfiB,WAAYL,KAAKP,qBA7CzB,GAA6Ba,IAAMC,WCAtBC,EAAO,SAAC,GAAwC,IAAtCb,EAAqC,EAArCA,KAAMc,EAA+B,EAA/BA,aAAcC,EAAiB,EAAjBA,WACnCxB,EAAyBS,EAAzBT,GAAID,EAAqBU,EAArBV,MAAqBU,EAAdR,UAEjB,OACE,4BACE,yBAAKc,UAAU,QACb,2BAAOU,KAAK,WAAWV,UAAU,SAASf,GAAIA,EAAI0B,QAASH,IAC3D,2BAAOI,QAAS3B,GAAKD,GACrB,4BAAQ0B,KAAK,SAASV,UAAU,UAAUW,QAASF,KAErD,2BAAOC,KAAK,OAAOV,UAAU,WCTtBa,EAAW,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAON,EAAV,EAAUA,aAAcC,EAAxB,EAAwBA,WAAxB,OACtB,wBAAIT,UAAU,aACXc,EAAMC,KAAI,SAACrB,EAAMsB,GAAP,OAAiB,kBAAC,EAAD,CAAMvB,IAAKC,EAAKT,GAAIS,KAAMA,EAAMc,aAAc,kBAAMA,EAAad,EAAKT,KAAKwB,WAAY,kBAAMA,EAAWf,EAAKT,YCFhIgC,EAAb,2MACElC,MAAQ,CACN+B,MAAO,IAFX,EAqBEhB,QAAU,SAACJ,GACT,EAAKH,UAAS,SAAA2B,GAAS,MAAK,CAC1BJ,MAAM,GAAD,mBACAI,EAAUJ,OADV,CAEHpB,SAzBR,EA8BEc,aAAe,SAACvB,GACd,EAAKM,UAAS,SAAA2B,GAAS,MAAK,CAC1BJ,MAAOI,EAAUJ,MAAMC,KAAI,SAAArB,GAAI,OAC7BA,EAAKT,KAAOA,EAAZ,eAEOS,EAFP,CAEaE,WAAYF,EAAKE,YAE1BF,UArCZ,EA0CEe,WAAa,SAACxB,GACZ,EAAKM,UAAS,SAAA2B,GAAS,MAAK,CAC1BJ,MAAOI,EAAUJ,MAAMK,QAAO,SAAAzB,GAAI,OAAIA,EAAKT,KAAOA,UA5CxD,wEAgDY,IACA6B,EAAUf,KAAKhB,MAAf+B,MACFM,EAAWN,EAAMK,QAAO,SAAAzB,GAAI,OAAuB,IAAnBA,EAAKE,aAE3C,OACE,6BAASI,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,kBAAC,EAAD,CAASF,QAASC,KAAKD,WAGzB,6BAASE,UAAU,QACjB,2BAAOU,KAAK,WAAWzB,GAAG,aAAae,UAAU,eACjD,2BAAOY,QAAQ,cAAf,wBACA,kBAAC,EAAD,CACEE,MAAOA,EACPN,aAAcT,KAAKS,aACnBC,WAAYV,KAAKU,cAIrB,4BAAQT,UAAU,UAChB,0BAAMA,UAAU,cACboB,EAASC,OADZ,cAKA,wBAAIrB,UAAU,WACZ,4BACE,uBAAGsB,KAAK,KAAKtB,UAAU,YAAvB,QAGF,4BACE,uBAAGsB,KAAK,YAAR,WAGF,4BACE,uBAAGA,KAAK,eAAR,eAIJ,4BAAQZ,KAAK,SAASV,UAAU,mBAAhC,yBAzFV,GAAyBM,aCEzBiB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.27549d89.chunk.js","sourcesContent":["import React from 'react';\nimport uuid from 'uuid/v4';\n\nexport class NewTodo extends React.Component {\n  state = {\n    title: '',\n    id: '',\n    complited: false,\n  }\n\n  handleChange = (event) => {\n    const title = event.target.value;\n\n    this.setState({\n      title,\n    });\n  }\n\n  handleKeyPress = (event) => {\n    const { title } = this.state;\n\n    if (event.key === 'Enter') {\n      const todo = {\n        id: uuid(),\n        title,\n        completed: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n        id: '',\n        complited: false,\n      })\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        name={title}\n        value={title}\n        onChange={this.handleChange}\n        onKeyPress={this.handleKeyPress}\n\n      />\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({ todo, toggledCheck, deleteTask }) => {\nconst { id, title, complited } = todo;\n\n  return (\n    <li>\n      <div className=\"view\">\n        <input type=\"checkbox\" className=\"toggle\" id={id} onClick={toggledCheck} />\n        <label htmlFor={id}>{title}</label>\n        <button type=\"button\" className=\"destroy\" onClick={deleteTask} />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo/Todo';\n\nexport const TodoList = ({ todos, toggledCheck, deleteTask }) => (\n  <ul className=\"todo-list\">\n    {todos.map((todo, index) => <Todo key={todo.id} todo={todo} toggledCheck={() => toggledCheck(todo.id)} deleteTask={() => deleteTask(todo.id)} />)}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bull,\n    }).isRequired,\n  ).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { NewTodo } from './components/NewTodo/NewTodo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport class App extends Component {\n  state = {\n    todos: [],\n  }\n\n  // componentDidMount() {\n  //   const persistedNotes = localStorage.getItem('todos');\n  //\n  //   if (persistedNotes) {\n  //     const todos = JSON.parse(persistedNotes);\n  //\n  //     this.setState({ todos });\n  //   }\n  // }\n  //\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.todos !== this.state.todos) {\n  //     localStorage.setItem('todos', JSON.stringify(this.state.todos));\n  //   }\n  // }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        todo,\n      ],\n    }));\n  }\n\n  toggledCheck = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, completed: !todo.completed,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  deleteTask = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  render() {\n    const { todos } = this.state;\n    const leftList = todos.filter(todo => todo.completed === false);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input type=\"checkbox\" id=\"toggle-all\" className=\"toggle-all\" />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={todos}\n            toggledCheck={this.toggledCheck}\n            deleteTask={this.deleteTask}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {leftList.length}\n             items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a href=\"#/\" className=\"selected\">All</a>\n            </li>\n\n            <li>\n              <a href=\"#/active\">Active</a>\n            </li>\n\n            <li>\n              <a href=\"#/completed\">Completed</a>\n            </li>\n          </ul>\n\n          <button type=\"button\" className=\"clear-completed\">\n           Clear completed\n          </button>\n        </footer>\n      </section>\n\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.scss';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
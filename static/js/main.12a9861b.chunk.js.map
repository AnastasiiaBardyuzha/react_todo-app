{"version":3,"sources":["components/NewTodo/NewTodo.js","components/Todo/Todo.js","components/TodoList/TodoList.js","App.js","index.js"],"names":["NewTodo","state","title","handleChange","event","target","value","replace","setState","handleKeyPress","key","todo","id","uuidv4","completed","props","addTodo","this","className","placeholder","name","onChange","onKeyPress","React","Component","Todo","toggledCheck","deleteTask","type","checked","htmlFor","onClick","TodoList","todos","map","index","App","visibleTodos","filter","prevState","filtered","getAttribute","Boolean","clearedCompleted","checkedAll","persistedNotes","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","leftList","length","href","cx","selected","data-filter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.12a9861b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class NewTodo extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleChange = (event) => {\n    const title = event.target.value.replace(/^\\s/, '');\n\n    this.setState({\n      title,\n    });\n  }\n\n  handleKeyPress = (event) => {\n    const { title } = this.state;\n\n    if (event.key === 'Enter') {\n      const todo = {\n        id: uuidv4(),\n        title,\n        completed: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        name={title}\n        value={title}\n        onChange={this.handleChange}\n        onKeyPress={this.handleKeyPress}\n\n      />\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({ todo, toggledCheck, deleteTask }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          id={id}\n          onChange={event => toggledCheck(event.target.checked)}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={deleteTask}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo/Todo';\n\nexport const TodoList = ({ todos, toggledCheck, deleteTask }) => (\n  <ul className=\"todo-list\">\n    {todos.map(\n      (todo, index) => (\n        <Todo\n          key={todo.id}\n          todo={todo}\n          toggledCheck={checked => toggledCheck(todo.id, checked)}\n          deleteTask={() => deleteTask(todo.id)}\n        />\n      ),\n    )}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport * as cx from 'classnames';\n\nimport { NewTodo } from './components/NewTodo/NewTodo';\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport class App extends Component {\n  state = {\n    todos: [],\n    visibleTodos: [],\n    filter: 'All',\n  }\n\n  componentDidMount() {\n    const persistedNotes = localStorage.getItem('todos');\n\n    if (persistedNotes) {\n      const todos = JSON.parse(persistedNotes);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.todos !== this.state.todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    this.setState(prevState => ({\n      todos: [\n        ...prevState.todos,\n        todo,\n      ],\n      visibleTodos: [\n        ...prevState.todos,\n        todo,\n      ],\n    }));\n  }\n\n  toggledCheck = (id, checked) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, completed: checked,\n          }\n          : todo\n      )),\n      visibleTodos: prevState.visibleTodos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, completed: checked,\n          }\n          : todo\n      )),\n    }));\n  }\n\n  filtered = (event) => {\n    let filter = event.target.getAttribute('data-filter');\n\n    switch (filter) {\n      case 'Active':\n        filter = false;\n        break;\n\n      case 'Completed':\n        filter = true;\n        break;\n      default:\n    }\n\n    this.setState(prevState => ({\n      visibleTodos: filter === 'All'\n        ? prevState.todos\n        : prevState.todos.filter(todo => todo.completed === Boolean(filter)),\n      filter,\n    }));\n  }\n\n  deleteTask = (id) => {\n    this.setState(prevState => ({\n      visibleTodos: prevState.visibleTodos.filter(todo => todo.id !== id),\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  }\n\n  clearedCompleted = () => {\n    this.setState(prevState => ({\n      visibleTodos: prevState.visibleTodos.filter(\n        todo => !todo.completed,\n      ),\n      todos: prevState.todos.filter(todo => !todo.completed),\n    }));\n  }\n\n  checkedAll = (event) => {\n    if (event.target.checked) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => (\n          {\n            ...todo,\n            completed: true,\n          }\n        )),\n        visibleTodos: prevState.visibleTodos.map(todo => (\n          {\n            ...todo,\n            completed: true,\n          }\n        )),\n      }));\n    } else {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => (\n          {\n            ...todo,\n            completed: false,\n          }\n        )),\n        visibleTodos: prevState.visibleTodos.map(todo => (\n          {\n            ...todo,\n            completed: false,\n          }\n        )),\n      }));\n    }\n  }\n\n  render() {\n    const { todos, visibleTodos, filter } = this.state;\n    const leftList = todos.filter(todo => !todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.checkedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={visibleTodos}\n            toggledCheck={this.toggledCheck}\n            deleteTask={this.deleteTask}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {leftList.length}\n             items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={\n                  cx({ selected: filter === 'All' })\n                }\n                data-filter=\"All\"\n                onClick={this.filtered}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={\n                  cx({ selected: filter === false })\n                }\n                data-filter=\"Active\"\n                onClick={this.filtered}\n              >\n              Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                className={\n                  cx({ selected: filter === true })\n                }\n                data-filter=\"Completed\"\n                onClick={this.filtered}\n              >\n              Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearedCompleted}\n          >\n           Clear completed\n          </button>\n        </footer>\n      </section>\n\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.scss';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}
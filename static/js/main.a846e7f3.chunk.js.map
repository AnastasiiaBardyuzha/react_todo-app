{"version":3,"sources":["components/NewTodo/NewTodo.js","components/Todo/Todo.js","components/TodoList/TodoList.js","components/FilterItems/FilterItems.js","App.js","index.js"],"names":["NewTodo","state","title","handleChange","event","target","value","setState","handleSubmit","preventDefault","length","todo","id","uuidv4","trim","completed","props","addTodo","this","onSubmit","className","placeholder","name","onChange","React","Component","Todo","toggledCheck","deleteTask","type","checked","htmlFor","onClick","TodoList","todos","map","index","key","FilterItems","filterTypes","filtered","filter","filterType","cx","selected","data-filter","filterTodos","App","visibleTodos","prevState","allTodos","getAttribute","clearCompleted","checkedAll","todosFromStorage","localStorage","getItem","JSON","parse","prevProps","setItem","stringify","activeTodos","every","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a846e7f3.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\n\nexport class NewTodo extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleChange = (event) => {\n    const { value: title } = event.target;\n\n    this.setState({\n      title,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const { title } = this.state;\n\n    if (title.length > 0) {\n      const todo = {\n        id: uuidv4(),\n        title: title.trim(),\n        completed: false,\n      };\n\n      this.props.addTodo(todo);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          name={title}\n          value={title}\n          onChange={this.handleChange}\n        />\n      </form>\n    );\n  }\n}\n\nNewTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const Todo = ({ todo, toggledCheck, deleteTask }) => {\n  const { id, title, completed } = todo;\n\n  return (\n    <li>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          checked={completed}\n          id={id}\n          onChange={event => toggledCheck(event.target.checked)}\n        />\n        <label htmlFor={id}>{title}</label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={deleteTask}\n        />\n      </div>\n      <input type=\"text\" className=\"edit\" />\n    </li>\n  );\n};\n\nTodo.propTypes = {\n  todo: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    completed: PropTypes.bool.isRequired,\n  }).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Todo } from '../Todo/Todo';\n\nexport const TodoList = ({ todos, toggledCheck, deleteTask }) => (\n  <ul className=\"todo-list\">\n    {todos.map((todo, index) => (\n      <Todo\n        key={todo.id}\n        todo={todo}\n        toggledCheck={checked => toggledCheck(todo.id, checked)}\n        deleteTask={() => deleteTask(todo.id)}\n      />\n    ))}\n  </ul>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.string.isRequired,\n      completed: PropTypes.bool.isRequired,\n    }).isRequired,\n  ).isRequired,\n  deleteTask: PropTypes.func.isRequired,\n  toggledCheck: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport * as cx from 'classnames';\n\nexport const FilterItems = ({ filterTypes, filtered, filter }) => (\n  <ul className=\"filters\">\n    {filterTypes.map(filterType => (\n      <li key={filterType}>\n        <button\n          type=\"button\"\n          className={\n            cx({ selected: filter === filterType })\n          }\n          data-filter={filterType}\n          onClick={filtered}\n        >\n          {filterType}\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nFilterItems.propTypes = {\n  filterTypes: PropTypes.arrayOf(\n    PropTypes.string.isRequired,\n  ).isRequired,\n  filtered: PropTypes.func.isRequired,\n  filter: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.bool,\n  ]).isRequired,\n};\n","import React, { Component } from 'react';\n\nimport { NewTodo } from './components/NewTodo/NewTodo';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { FilterItems } from './components/FilterItems/FilterItems';\n\nconst filterTypes = ['All', 'Active', 'Completed'];\n\nconst filterTodos = (todos, filter) => {\n  switch (filter) {\n    case 'Active':\n      return todos.filter(todo => todo.completed === false);\n    case 'Completed':\n      return todos.filter(todo => todo.completed === true);\n    default:\n      return todos;\n  }\n};\n\nexport class App extends Component {\n  state = {\n    todos: [],\n    visibleTodos: [],\n    filter: 'All',\n  }\n\n  componentDidMount() {\n    const todosFromStorage = localStorage.getItem('todos');\n\n    if (todosFromStorage) {\n      const todos = JSON.parse(todosFromStorage);\n\n      this.setState({ todos });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { todos } = this.state;\n\n    if (prevState.todos !== todos) {\n      localStorage.setItem('todos', JSON.stringify(this.state.todos));\n    }\n  }\n\n  addTodo = (todo) => {\n    const { filter, todos } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = [...todos, todo];\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  toggledCheck = (id, checked) => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.map(todo => (\n        todo.id === id\n          ? {\n            ...todo, completed: checked,\n          }\n          : todo\n      ));\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  filtered = (event) => {\n    const filter = event.target.getAttribute('data-filter');\n    const { todos } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = [...todos];\n\n      return {\n        visibleTodos: filterTodos(allTodos, filter),\n        filter,\n      };\n    });\n  }\n\n  deleteTask = (id) => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => todo.id !== id);\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  clearCompleted = () => {\n    const { filter } = this.state;\n\n    this.setState((prevState) => {\n      const allTodos = prevState.todos.filter(todo => !todo.completed);\n\n      return {\n        todos: allTodos,\n        visibleTodos: filterTodos(allTodos, filter),\n      };\n    });\n  }\n\n  checkedAll = ({ target }) => {\n    const { checked } = target;\n\n    this.setState(prevState => ({\n      todos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n      visibleTodos: prevState.todos.map(todo => ({\n        ...todo,\n        completed: checked,\n      })),\n    }));\n  }\n\n  render() {\n    const { todos, visibleTodos, filter } = this.state;\n    const activeTodos = todos.filter(todo => !todo.completed);\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTodo addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            checked={todos.length && todos.every(todo => todo.completed)}\n            onClick={this.checkedAll}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n          <TodoList\n            todos={visibleTodos}\n            toggledCheck={this.toggledCheck}\n            deleteTask={this.deleteTask}\n          />\n        </section>\n\n        <footer className=\"footer\">\n          <span className=\"todo-count\">\n            {`${activeTodos.length} items left`}\n          </span>\n          <FilterItems\n            filtered={this.filtered}\n            filterTypes={filterTypes}\n            filter={filter}\n          />\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clearCompleted}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.scss';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}